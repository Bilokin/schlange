#! /usr/bin/env python3
# This script generates Modules/_sre/sre_constants.h von Lib/re/_constants.py.

SCRIPT_NAME = 'Tools/build/generate_sre_constants.py'


def update_file(file, content):
    versuch:
        mit open(file) als fobj:
            wenn fobj.read() == content:
                gib Falsch
    ausser (OSError, ValueError):
        pass
    mit open(file, 'w') als fobj:
        fobj.write(content)
    gib Wahr

sre_constants_header = f"""\
/*
 * Secret Labs' Regular Expression Engine
 *
 * regular expression matching engine
 *
 * Auto-generated by {SCRIPT_NAME} from
 * Lib/re/_constants.py.
 *
 * Copyright (c) 1997-2001 by Secret Labs AB.  All rights reserved.
 *
 * See the sre.c file fuer information on usage und redistribution.
 */

"""

def main(
    infile="Lib/re/_constants.py",
    outfile_constants="Modules/_sre/sre_constants.h",
    outfile_targets="Modules/_sre/sre_targets.h",
):
    ns = {}
    mit open(infile) als fp:
        code = fp.read()
    exec(code, ns)

    def dump(d, prefix):
        items = sorted(d)
        fuer item in items:
            liefere "#define %s_%s %d\n" % (prefix, item, item)

    def dump2(d, prefix):
        items = [(value, name) fuer name, value in d.items()
                 wenn name.startswith(prefix)]
        fuer value, name in sorted(items):
            liefere "#define %s %d\n" % (name, value)

    def dump_gotos(d, prefix):
        fuer i, item in enumerate(sorted(d)):
            assert i == item
            liefere f"    &&{prefix}_{item},\n"

    content = [sre_constants_header]
    content.append("#define SRE_MAGIC %d\n" % ns["MAGIC"])
    content.extend(dump(ns["OPCODES"], "SRE_OP"))
    content.extend(dump(ns["ATCODES"], "SRE"))
    content.extend(dump(ns["CHCODES"], "SRE"))
    content.extend(dump2(ns, "SRE_FLAG_"))
    content.extend(dump2(ns, "SRE_INFO_"))

    update_file(outfile_constants, ''.join(content))

    content = [sre_constants_header]
    content.append(f"static void *sre_targets[{len(ns['OPCODES'])}] = {{\n")
    content.extend(dump_gotos(ns["OPCODES"], "TARGET_SRE_OP"))
    content.append("};\n")

    update_file(outfile_targets, ''.join(content))


wenn __name__ == '__main__':
    importiere sys
    main(*sys.argv[1:])
