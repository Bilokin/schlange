#!/usr/bin/env python3.8
# @generated by pegen von metagrammar.gram

importiere ast
importiere sys
importiere tokenize

von typing importiere Any, Optional

von pegen.parser importiere memoize, memoize_left_rec, logger, Parser
von ast importiere literal_eval

von pegen.grammar importiere (
    Alt,
    Cut,
    Forced,
    Gather,
    Group,
    Item,
    Lookahead,
    LookaheadOrCut,
    MetaTuple,
    MetaList,
    NameLeaf,
    NamedItem,
    NamedItemList,
    NegativeLookahead,
    Opt,
    Plain,
    PositiveLookahead,
    Repeat0,
    Repeat1,
    Rhs,
    Rule,
    RuleList,
    RuleName,
    Grammar,
    StringLeaf,
)

# Keywords und soft keywords are listed at the end of the parser definition.
klasse GeneratedParser(Parser):

    @memoize
    def start(self) -> Optional[Grammar]:
        # start: grammar $
        mark = self._mark()
        wenn (
            (grammar := self.grammar())
            und
            (_endmarker := self.expect('ENDMARKER'))
        ):
            gib grammar
        self._reset(mark)
        gib Nichts

    @memoize
    def grammar(self) -> Optional[Grammar]:
        # grammar: metas rules | rules
        mark = self._mark()
        wenn (
            (metas := self.metas())
            und
            (rules := self.rules())
        ):
            gib Grammar ( rules , metas )
        self._reset(mark)
        wenn (
            (rules := self.rules())
        ):
            gib Grammar ( rules , [] )
        self._reset(mark)
        gib Nichts

    @memoize
    def metas(self) -> Optional[MetaList]:
        # metas: meta metas | meta
        mark = self._mark()
        wenn (
            (meta := self.meta())
            und
            (metas := self.metas())
        ):
            gib [meta] + metas
        self._reset(mark)
        wenn (
            (meta := self.meta())
        ):
            gib [meta]
        self._reset(mark)
        gib Nichts

    @memoize
    def meta(self) -> Optional[MetaTuple]:
        # meta: "@" NAME NEWLINE | "@" NAME NAME NEWLINE | "@" NAME STRING NEWLINE
        mark = self._mark()
        wenn (
            (literal := self.expect("@"))
            und
            (name := self.name())
            und
            (_newline := self.expect('NEWLINE'))
        ):
            gib ( name . string , Nichts )
        self._reset(mark)
        wenn (
            (literal := self.expect("@"))
            und
            (a := self.name())
            und
            (b := self.name())
            und
            (_newline := self.expect('NEWLINE'))
        ):
            gib ( a . string , b . string )
        self._reset(mark)
        wenn (
            (literal := self.expect("@"))
            und
            (name := self.name())
            und
            (string := self.string())
            und
            (_newline := self.expect('NEWLINE'))
        ):
            gib ( name . string , literal_eval ( string . string ) )
        self._reset(mark)
        gib Nichts

    @memoize
    def rules(self) -> Optional[RuleList]:
        # rules: rule rules | rule
        mark = self._mark()
        wenn (
            (rule := self.rule())
            und
            (rules := self.rules())
        ):
            gib [rule] + rules
        self._reset(mark)
        wenn (
            (rule := self.rule())
        ):
            gib [rule]
        self._reset(mark)
        gib Nichts

    @memoize
    def rule(self) -> Optional[Rule]:
        # rule: rulename memoflag? ":" alts NEWLINE INDENT more_alts DEDENT | rulename memoflag? ":" NEWLINE INDENT more_alts DEDENT | rulename memoflag? ":" alts NEWLINE
        mark = self._mark()
        wenn (
            (rulename := self.rulename())
            und
            (opt := self.memoflag(),)
            und
            (literal := self.expect(":"))
            und
            (alts := self.alts())
            und
            (_newline := self.expect('NEWLINE'))
            und
            (_indent := self.expect('INDENT'))
            und
            (more_alts := self.more_alts())
            und
            (_dedent := self.expect('DEDENT'))
        ):
            gib Rule ( rulename [0] , rulename [1] , Rhs ( alts . alts + more_alts . alts ) , memo = opt )
        self._reset(mark)
        wenn (
            (rulename := self.rulename())
            und
            (opt := self.memoflag(),)
            und
            (literal := self.expect(":"))
            und
            (_newline := self.expect('NEWLINE'))
            und
            (_indent := self.expect('INDENT'))
            und
            (more_alts := self.more_alts())
            und
            (_dedent := self.expect('DEDENT'))
        ):
            gib Rule ( rulename [0] , rulename [1] , more_alts , memo = opt )
        self._reset(mark)
        wenn (
            (rulename := self.rulename())
            und
            (opt := self.memoflag(),)
            und
            (literal := self.expect(":"))
            und
            (alts := self.alts())
            und
            (_newline := self.expect('NEWLINE'))
        ):
            gib Rule ( rulename [0] , rulename [1] , alts , memo = opt )
        self._reset(mark)
        gib Nichts

    @memoize
    def rulename(self) -> Optional[RuleName]:
        # rulename: NAME annotation | NAME
        mark = self._mark()
        wenn (
            (name := self.name())
            und
            (annotation := self.annotation())
        ):
            gib ( name . string , annotation )
        self._reset(mark)
        wenn (
            (name := self.name())
        ):
            gib ( name . string , Nichts )
        self._reset(mark)
        gib Nichts

    @memoize
    def memoflag(self) -> Optional[str]:
        # memoflag: '(' "memo" ')'
        mark = self._mark()
        wenn (
            (literal := self.expect('('))
            und
            (literal_1 := self.expect("memo"))
            und
            (literal_2 := self.expect(')'))
        ):
            gib "memo"
        self._reset(mark)
        gib Nichts

    @memoize
    def alts(self) -> Optional[Rhs]:
        # alts: alt "|" alts | alt
        mark = self._mark()
        wenn (
            (alt := self.alt())
            und
            (literal := self.expect("|"))
            und
            (alts := self.alts())
        ):
            gib Rhs ( [alt] + alts . alts )
        self._reset(mark)
        wenn (
            (alt := self.alt())
        ):
            gib Rhs ( [alt] )
        self._reset(mark)
        gib Nichts

    @memoize
    def more_alts(self) -> Optional[Rhs]:
        # more_alts: "|" alts NEWLINE more_alts | "|" alts NEWLINE
        mark = self._mark()
        wenn (
            (literal := self.expect("|"))
            und
            (alts := self.alts())
            und
            (_newline := self.expect('NEWLINE'))
            und
            (more_alts := self.more_alts())
        ):
            gib Rhs ( alts . alts + more_alts . alts )
        self._reset(mark)
        wenn (
            (literal := self.expect("|"))
            und
            (alts := self.alts())
            und
            (_newline := self.expect('NEWLINE'))
        ):
            gib Rhs ( alts . alts )
        self._reset(mark)
        gib Nichts

    @memoize
    def alt(self) -> Optional[Alt]:
        # alt: items '$' action | items '$' | items action | items
        mark = self._mark()
        wenn (
            (items := self.items())
            und
            (literal := self.expect('$'))
            und
            (action := self.action())
        ):
            gib Alt ( items + [NamedItem ( Nichts , NameLeaf ( 'ENDMARKER' ) )] , action = action )
        self._reset(mark)
        wenn (
            (items := self.items())
            und
            (literal := self.expect('$'))
        ):
            gib Alt ( items + [NamedItem ( Nichts , NameLeaf ( 'ENDMARKER' ) )] , action = Nichts )
        self._reset(mark)
        wenn (
            (items := self.items())
            und
            (action := self.action())
        ):
            gib Alt ( items , action = action )
        self._reset(mark)
        wenn (
            (items := self.items())
        ):
            gib Alt ( items , action = Nichts )
        self._reset(mark)
        gib Nichts

    @memoize
    def items(self) -> Optional[NamedItemList]:
        # items: named_item items | named_item
        mark = self._mark()
        wenn (
            (named_item := self.named_item())
            und
            (items := self.items())
        ):
            gib [named_item] + items
        self._reset(mark)
        wenn (
            (named_item := self.named_item())
        ):
            gib [named_item]
        self._reset(mark)
        gib Nichts

    @memoize
    def named_item(self) -> Optional[NamedItem]:
        # named_item: NAME annotation '=' ~ item | NAME '=' ~ item | item | forced_atom | lookahead
        mark = self._mark()
        cut = Falsch
        wenn (
            (name := self.name())
            und
            (annotation := self.annotation())
            und
            (literal := self.expect('='))
            und
            (cut := Wahr)
            und
            (item := self.item())
        ):
            gib NamedItem ( name . string , item , annotation )
        self._reset(mark)
        wenn cut: gib Nichts
        cut = Falsch
        wenn (
            (name := self.name())
            und
            (literal := self.expect('='))
            und
            (cut := Wahr)
            und
            (item := self.item())
        ):
            gib NamedItem ( name . string , item )
        self._reset(mark)
        wenn cut: gib Nichts
        wenn (
            (item := self.item())
        ):
            gib NamedItem ( Nichts , item )
        self._reset(mark)
        wenn (
            (forced := self.forced_atom())
        ):
            gib NamedItem ( Nichts , forced )
        self._reset(mark)
        wenn (
            (it := self.lookahead())
        ):
            gib NamedItem ( Nichts , it )
        self._reset(mark)
        gib Nichts

    @memoize
    def forced_atom(self) -> Optional[Forced]:
        # forced_atom: '&' '&' ~ atom
        mark = self._mark()
        cut = Falsch
        wenn (
            (literal := self.expect('&'))
            und
            (literal_1 := self.expect('&'))
            und
            (cut := Wahr)
            und
            (atom := self.atom())
        ):
            gib Forced ( atom )
        self._reset(mark)
        wenn cut: gib Nichts
        gib Nichts

    @memoize
    def lookahead(self) -> Optional[LookaheadOrCut]:
        # lookahead: '&' ~ atom | '!' ~ atom | '~'
        mark = self._mark()
        cut = Falsch
        wenn (
            (literal := self.expect('&'))
            und
            (cut := Wahr)
            und
            (atom := self.atom())
        ):
            gib PositiveLookahead ( atom )
        self._reset(mark)
        wenn cut: gib Nichts
        cut = Falsch
        wenn (
            (literal := self.expect('!'))
            und
            (cut := Wahr)
            und
            (atom := self.atom())
        ):
            gib NegativeLookahead ( atom )
        self._reset(mark)
        wenn cut: gib Nichts
        wenn (
            (literal := self.expect('~'))
        ):
            gib Cut ( )
        self._reset(mark)
        gib Nichts

    @memoize
    def item(self) -> Optional[Item]:
        # item: '[' ~ alts ']' | atom '?' | atom '*' | atom '+' | atom '.' atom '+' | atom
        mark = self._mark()
        cut = Falsch
        wenn (
            (literal := self.expect('['))
            und
            (cut := Wahr)
            und
            (alts := self.alts())
            und
            (literal_1 := self.expect(']'))
        ):
            gib Opt ( alts )
        self._reset(mark)
        wenn cut: gib Nichts
        wenn (
            (atom := self.atom())
            und
            (literal := self.expect('?'))
        ):
            gib Opt ( atom )
        self._reset(mark)
        wenn (
            (atom := self.atom())
            und
            (literal := self.expect('*'))
        ):
            gib Repeat0 ( atom )
        self._reset(mark)
        wenn (
            (atom := self.atom())
            und
            (literal := self.expect('+'))
        ):
            gib Repeat1 ( atom )
        self._reset(mark)
        wenn (
            (sep := self.atom())
            und
            (literal := self.expect('.'))
            und
            (node := self.atom())
            und
            (literal_1 := self.expect('+'))
        ):
            gib Gather ( sep , node )
        self._reset(mark)
        wenn (
            (atom := self.atom())
        ):
            gib atom
        self._reset(mark)
        gib Nichts

    @memoize
    def atom(self) -> Optional[Plain]:
        # atom: '(' ~ alts ')' | NAME | STRING
        mark = self._mark()
        cut = Falsch
        wenn (
            (literal := self.expect('('))
            und
            (cut := Wahr)
            und
            (alts := self.alts())
            und
            (literal_1 := self.expect(')'))
        ):
            gib Group ( alts )
        self._reset(mark)
        wenn cut: gib Nichts
        wenn (
            (name := self.name())
        ):
            gib NameLeaf ( name . string )
        self._reset(mark)
        wenn (
            (string := self.string())
        ):
            gib StringLeaf ( string . string )
        self._reset(mark)
        gib Nichts

    @memoize
    def action(self) -> Optional[str]:
        # action: "{" ~ target_atoms "}"
        mark = self._mark()
        cut = Falsch
        wenn (
            (literal := self.expect("{"))
            und
            (cut := Wahr)
            und
            (target_atoms := self.target_atoms())
            und
            (literal_1 := self.expect("}"))
        ):
            gib target_atoms
        self._reset(mark)
        wenn cut: gib Nichts
        gib Nichts

    @memoize
    def annotation(self) -> Optional[str]:
        # annotation: "[" ~ target_atoms "]"
        mark = self._mark()
        cut = Falsch
        wenn (
            (literal := self.expect("["))
            und
            (cut := Wahr)
            und
            (target_atoms := self.target_atoms())
            und
            (literal_1 := self.expect("]"))
        ):
            gib target_atoms
        self._reset(mark)
        wenn cut: gib Nichts
        gib Nichts

    @memoize
    def target_atoms(self) -> Optional[str]:
        # target_atoms: target_atom target_atoms | target_atom
        mark = self._mark()
        wenn (
            (target_atom := self.target_atom())
            und
            (target_atoms := self.target_atoms())
        ):
            gib target_atom + " " + target_atoms
        self._reset(mark)
        wenn (
            (target_atom := self.target_atom())
        ):
            gib target_atom
        self._reset(mark)
        gib Nichts

    @memoize
    def target_atom(self) -> Optional[str]:
        # target_atom: "{" ~ target_atoms? "}" | "[" ~ target_atoms? "]" | NAME "*" | NAME | NUMBER | STRING | FSTRING_START | FSTRING_MIDDLE | FSTRING_END | "?" | ":" | !"}" !"]" OP
        mark = self._mark()
        cut = Falsch
        wenn (
            (literal := self.expect("{"))
            und
            (cut := Wahr)
            und
            (atoms := self.target_atoms(),)
            und
            (literal_1 := self.expect("}"))
        ):
            gib "{" + ( atoms oder "" ) + "}"
        self._reset(mark)
        wenn cut: gib Nichts
        cut = Falsch
        wenn (
            (literal := self.expect("["))
            und
            (cut := Wahr)
            und
            (atoms := self.target_atoms(),)
            und
            (literal_1 := self.expect("]"))
        ):
            gib "[" + ( atoms oder "" ) + "]"
        self._reset(mark)
        wenn cut: gib Nichts
        wenn (
            (name := self.name())
            und
            (literal := self.expect("*"))
        ):
            gib name . string + "*"
        self._reset(mark)
        wenn (
            (name := self.name())
        ):
            gib name . string
        self._reset(mark)
        wenn (
            (number := self.number())
        ):
            gib number . string
        self._reset(mark)
        wenn (
            (string := self.string())
        ):
            gib string . string
        self._reset(mark)
        wenn (
            (fstring_start := self.fstring_start())
        ):
            gib fstring_start . string
        self._reset(mark)
        wenn (
            (fstring_middle := self.fstring_middle())
        ):
            gib fstring_middle . string
        self._reset(mark)
        wenn (
            (fstring_end := self.fstring_end())
        ):
            gib fstring_end . string
        self._reset(mark)
        wenn (
            (literal := self.expect("?"))
        ):
            gib "?"
        self._reset(mark)
        wenn (
            (literal := self.expect(":"))
        ):
            gib ":"
        self._reset(mark)
        wenn (
            self.negative_lookahead(self.expect, "}")
            und
            self.negative_lookahead(self.expect, "]")
            und
            (op := self.op())
        ):
            gib op . string
        self._reset(mark)
        gib Nichts

    KEYWORDS = ()
    SOFT_KEYWORDS = ('memo',)


wenn __name__ == '__main__':
    von pegen.parser importiere simple_parser_main
    simple_parser_main(GeneratedParser)
